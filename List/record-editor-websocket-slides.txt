Editing
• Powered by Angular, Node.js, and WebSockets
Business Need
• Concurrent editing causes data conflicts
• Lack of user awareness during shared record access
• Need for real-time notifications and session awareness
Business Solution
• Real-time alerts when a record is being edited
• Secure sessions using JWT
• Scalable architecture with WebSocket technology
Benefits
• Users: Seamless collaborative experience
• Admins: Track concurrent sessions
• Business: Reduce conflicts, improve data integrity
Architecture Overview
• Frontend: Angular + RxJS + WebSocket Client
• Backend: Express + Socket.IO + JWT
• Deployment: PCF or container based or Dockerized
Prod Release
• Integrate Auth Provider (Auth0)
• Scale with DB-backed session state
• Optional UI enhancements (presence of  indicators)
Technical Overview
• Angular 18+ with RxJS for reactive components
• Node.js (Express) REST API and WebSocket server
• Socket.IO for bi-directional communication
• (JWT) like for session authentication
Folder Structure
• /client: Angular app
• /server: Express server with WebSocket
• Dockerfile: Unified deployment
Auth Flow
• 1. User logs in with userId
• 2. Server generates JWT
• 3. Angular stores token in localStorage
• 4. Socket.IO uses token in handshake
• 5. Server verifies token in middleware
WebSocket Events
• start-edit: Triggered when a user begins editing
• stop-edit: User ends editing
• record-editing: Broadcast to others
• record-edit-stopped: Reset notification
RxJS BehaviorSubject
• Shared recordStatus$ in WebSocketService
• Subscribed in AppComponent
• Enables clean communication between services and UI
Deployment Ready
• ng build for Angular
• Angular dist served via Express static middleware
• Dockerized with port exposure (3000)
• Ready for PCF
Further Enhancements
• Add Redis for scalable session state
• User presence indicators (avatars or indicators)
• Record lock timeout or force-unlock by admin
