# MABL Setup for Shell and Microfrontend Interaction in an Angular Project

This configuration demonstrates how to test interactions between an Angular shell application and its microfrontends using MABL's automation capabilities.

## Project Structure

```
angular-microfrontend-tests/
├── features/
│   ├── shell_navigation.feature
│   ├── microfrontend_loading.feature
│   └── cross_mfe_communication.feature
├── steps/
│   ├── shell_steps.mabl
│   ├── microfrontend_steps.mabl
│   └── shared_steps.mabl
├── config/
│   ├── angular_config.json
│   └── mfe_endpoints.json
├── tests/
│   └── api/
│       └── module_federation_tests.mabl
└── README.md
```

## Core Configuration Files

### 1. Angular Configuration (config/angular_config.json)
```json
{
  "shell": {
    "baseUrl": "http://localhost:4200",
    "routes": {
      "dashboard": "/dashboard",
      "login": "/login"
    }
  },
  "microfrontends": {
    "product-mfe": {
      "selector": "product-app",
      "loadTimeout": 10000
    },
    "checkout-mfe": {
      "selector": "checkout-app",
      "loadTimeout": 8000
    }
  }
}
```

### 2. Microfrontend Endpoints (config/mfe_endpoints.json)
```json
{
  "dev": {
    "product-mfe": "http://localhost:4201/remoteEntry.js",
    "checkout-mfe": "http://localhost:4202/remoteEntry.js"
  },
  "prod": {
    "product-mfe": "https://cdn.yourdomain.com/product/remoteEntry.js",
    "checkout-mfe": "https://cdn.yourdomain.com/checkout/remoteEntry.js"
  }
}
```

## Key Test Scenarios

### 1. Shell Navigation (features/shell_navigation.feature)
```gherkin
Feature: Shell Application Navigation
  As a shell application
  I should properly load and transition between microfrontends
  To provide a seamless user experience

  Scenario: Navigate to Product Microfrontend
    Given the shell application is loaded
    When I click on the "Products" navigation item
    Then the product microfrontend should load successfully
    And the shell header should remain visible

  Scenario: Preserve state during navigation
    Given I am on the product microfrontend
    When I add item "XYZ-123" to my cart
    And I navigate to the checkout microfrontend
    Then my cart should contain item "XYZ-123"
```

### 2. Microfrontend Loading (steps/microfrontend_steps.mabl)
```javascript
step("the {string} microfrontend should load successfully", async (context, mfeName) => {
  const config = context.config.load("angular_config.json");
  const mfeConfig = config.microfrontends[mfeName];
  
  // Wait for the microfrontend web component to be visible
  await context.assertions
    .element(mfeConfig.selector)
    .exists()
    .and()
    .isVisible()
    .withTimeout(mfeConfig.loadTimeout);
    
  // Verify the shell didn't reload
  await context.assertions
    .element("app-shell")
    .exists();
});

step("I add item {string} to my cart", async (context, itemId) => {
  // This action happens within the product MFE
  await context.page.click(`#add-to-cart-${itemId}`);
  
  // Verify the shell's cart badge updated
  await context.assertions
    .element("app-shell .cart-badge")
    .text()
    .notEquals("0");
});
```

## Advanced Testing Techniques

### 1. Module Federation Verification (tests/api/module_federation_tests.mabl)
```javascript
test("Verify Microfrontend Remote Entries", async (context) => {
  const endpoints = context.config.load("mfe_endpoints.json");
  const env = context.env.name;
  
  for (const [mfeName, url] of Object.entries(endpoints[env])) {
    const response = await context.http.get(url);
    
    await context.assertions
      .httpResponse(response)
      .statusCode()
      .equals(200)
      .and()
      .header("content-type")
      .contains("application/javascript");
    
    context.log(`Microfrontend ${mfeName} remote entry is available at ${url}`);
  }
});
```

### 2. Cross-Microfrontend Communication (steps/shared_steps.mabl)
```javascript
step("shared state should be consistent across MFEs", async (context) => {
  // Get auth token from shell
  const shellToken = await context.page.evaluate(() => {
    return window.shellApp.getAuthToken();
  });
  
  // Verify token is available in product MFE
  const productToken = await context.page.evaluate((selector) => {
    return document.querySelector(selector).getAuthToken();
  }, context.config.microfrontends["product-mfe"].selector);
  
  await context.assertions
    .value(shellToken)
    .equals(productToken)
    .withMessage("Auth tokens should match between shell and product MFE");
});
```

## CI/CD Integration

### 1. Pipeline Configuration
```yaml
# .github/workflows/mabl-tests.yml
name: MABL Angular Microfrontend Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'
          
      - name: Install MABL CLI
        run: npm install -g @mablhq/mabl-cli
        
      - name: Run Angular Shell Tests
        run: |
          mabl config set-api-key ${{ secrets.MABL_API_KEY }}
          mabl test --env=ci --tags="@shell"
          
      - name: Run Microfrontend Integration Tests
        run: |
          mabl test --env=ci --tags="@microfrontend"
        timeout-minutes: 30
```

## Best Practices for Angular Microfrontend Testing

1. **Web Component Selectors**: Use the custom element names as stable selectors
   ```javascript
   await context.page.click("product-app >>> .add-to-cart");
   ```

2. **Lifecycle Hooks**: Verify microfrontend lifecycle events
   ```javascript
   await context.page.evaluate((selector) => {
     const mfe = document.querySelector(selector);
     return mfe.isMounted && mfe.isInitialized;
   }, mfeSelector);
   ```

3. **Performance Metrics**: Track microfrontend load times
   ```javascript
   const loadTime = await context.metrics.measureLoadTime(
     () => context.page.click("#nav-products"),
     { until: `element("product-app").visible()` }
   );
   context.assert.value(loadTime).lessThan(2000);
   ```

4. **Error Boundary Testing**: Verify shell handles MFE failures
   ```javascript
   step("simulate failed MFE load", async (context) => {
     await context.page.route('*/remoteEntry.js', route => route.abort());
     await context.page.click("#nav-products");
     await context.assertions
       .element(".mfe-error-boundary")
       .isVisible();
   });
   ```

5. **Visual Regression**: Add visual assertions for shell + MFE combinations
   ```javascript
   await context.visual.assert.screenshot(
     "product-mfe-loaded",
     { fullPage: true, threshold: 0.1 }
   );
   ```

This setup provides comprehensive testing for Angular microfrontend architectures, covering both the technical integration points and user-facing functionality. The tests validate that the shell properly coordinates between microfrontends while maintaining application state and providing a consistent user experience.


# MABL Scripts Test Project: Setup and Deep Dive

## Project Overview
This sample test project demonstrates how to use MABL (Modern Automation Business Language) for test automation. MABL is a domain-specific language designed for creating and executing automated tests with a business-readable syntax.

## Project Structure

```
mabl-test-project/
├── features/                  # Feature files
│   ├── login.feature
│   ├── search.feature
│   └── checkout.feature
├── steps/                     # Step definitions
│   ├── login_steps.mabl
│   ├── search_steps.mabl
│   └── checkout_steps.mabl
├── config/                    # Configuration files
│   ├── environments.json
│   └── test_config.json
├── data/                      # Test data
│   ├── users.json
│   └── products.json
└── README.md
```

## Setup Instructions

### 1. Prerequisites
- Install MABL CLI: `npm install -g @mablhq/mabl-cli`
- Create a free account at [mabl.com](https://www.mabl.com)
- Configure your API key: `mabl config set-api-key YOUR_API_KEY`

### 2. Initialize Project
```bash
mabl init mabl-test-project
cd mabl-test-project
```

### 3. Sample Feature File (features/login.feature)
```gherkin
Feature: User Login
  As a registered user
  I want to log in to the application
  So that I can access my account

  Scenario: Successful login with valid credentials
    Given I am on the login page
    When I enter valid username "testuser@example.com" and password "secure123"
    And I click the login button
    Then I should be redirected to the dashboard
    And I should see a welcome message

  Scenario: Failed login with invalid credentials
    Given I am on the login page
    When I enter invalid username "wrong@example.com" and password "wrongpass"
    And I click the login button
    Then I should see an error message "Invalid credentials"
```

### 4. Sample Step Definition (steps/login_steps.mabl)
```javascript
/**
 * Login Step Definitions
 */

step("I am on the login page", async (context) => {
  await context.page.goto(context.env.baseUrl + "/login");
  await context.assertions.page.title().contains("Login");
});

step("I enter valid username {string} and password {string}", async (context, username, password) => {
  await context.page.fill("#username", username);
  await context.page.fill("#password", password);
});

step("I click the login button", async (context) => {
  await context.page.click("#login-btn");
});

step("I should be redirected to the dashboard", async (context) => {
  await context.assertions.page.url().contains("/dashboard");
});

step("I should see a welcome message", async (context) => {
  await context.assertions.element("#welcome-message").exists();
});

step("I should see an error message {string}", async (context, message) => {
  await context.assertions.element(".error-message").text().contains(message);
});
```

## Deep Dive into MABL Features

### 1. Data-Driven Testing
```javascript
// Using JSON data file
const testData = context.data.load("users.json");

step("Login with multiple users", async (context) => {
  for (const user of testData.users) {
    await context.page.fill("#username", user.email);
    await context.page.fill("#password", user.password);
    await context.page.click("#login-btn");
    
    if (user.valid) {
      await context.assertions.page.url().contains("/dashboard");
    } else {
      await context.assertions.element(".error-message").exists();
    }
    
    await context.page.goto(context.env.baseUrl + "/logout");
  }
});
```

### 2. Advanced Assertions
```javascript
step("Verify complex conditions", async (context) => {
  // Multiple assertions
  await context.assertions
    .element(".product-list")
    .count()
    .greaterThan(5);
    
  // Combined assertions
  await context.assertions
    .page.title()
    .contains("Products")
    .and()
    .element("#search-results")
    .exists();
});
```

### 3. Browser Interactions
```javascript
step("Perform complex interactions", async (context) => {
  // Hover over element
  await context.page.hover(".menu-item");
  
  // Drag and drop
  await context.page.dragAndDrop("#item-1", "#cart");
  
  // Handle iframes
  const frame = await context.page.frame("payment-iframe");
  await frame.fill("#card-number", "4111111111111111");
});
```

### 4. Environment Configuration (config/environments.json)
```json
{
  "dev": {
    "baseUrl": "https://dev.example.com",
    "apiUrl": "https://api.dev.example.com"
  },
  "staging": {
    "baseUrl": "https://staging.example.com",
    "apiUrl": "https://api.staging.example.com"
  },
  "prod": {
    "baseUrl": "https://example.com",
    "apiUrl": "https://api.example.com"
  }
}
```

### 5. API Testing
```javascript
step("Verify API response", async (context) => {
  const response = await context.http.get(
    `${context.env.apiUrl}/products`,
    {
      headers: { "Authorization": `Bearer ${context.vars.token}` }
    }
  );
  
  await context.assertions
    .httpResponse(response)
    .statusCode()
    .equals(200)
    .and()
    .jsonBody()
    .path("products[0].name")
    .equals("Sample Product");
});
```

## Running Tests

1. Run all tests in dev environment:
```bash
mabl test --env=dev
```

2. Run specific feature:
```bash
mabl test features/login.feature
```

3. Run with custom data:
```bash
mabl test --data-file=data/special_users.json
```

## Best Practices

1. **Modular Design**: Break tests into small, reusable steps
2. **Descriptive Names**: Use business-readable names for features and steps
3. **Data Separation**: Keep test data separate from test logic
4. **Environment Isolation**: Use different configurations for each environment
5. **Parallel Execution**: Tag tests appropriately for parallel runs
6. **Reporting**: Use MABL's built-in reporting or integrate with your CI/CD system

## Advanced Features to Explore

1. **Custom Assertions**: Create domain-specific assertion libraries
2. **Visual Testing**: Compare screenshots for UI changes
3. **Performance Testing**: Measure page load times and interactions
4. **CI/CD Integration**: Add to Jenkins, GitHub Actions, etc.
5. **Test Parallelization**: Run tests across multiple browsers simultaneously

This sample project provides a foundation for implementing MABL scripts in your test automation framework. The business-readable syntax combined with powerful automation capabilities makes MABL suitable for both technical and non-technical team members.