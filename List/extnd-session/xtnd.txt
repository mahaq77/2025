Overview & architecture
Goal: 
User logs in → backend creates session
Angular frontend stores no password/token, only session cookie (secure + httpOnly)
Keep-alive pings extend session expiry if user stays active
Supports MFA to improve security

Login ➜ Authenticate + optional MFA ➜ session cookie issued ➜ 
Frontend uses keep-alive ➜ backend validates session on each request

Backend (Node.js + Express)
Key libraries
express-session – for session storage
bcrypt – password hashing
cors – allow frontend
csurf – protect against CSRF (later)

npm install express express-session bcrypt cors csurf

server.js 
const express = require('express');
const session = require('express-session');
const bcrypt = require('bcrypt');
const cors = require('cors');
const csurf = require('csurf');

const app = express();
app.use(express.json()); // parse JSON body

app.use(cors({
  origin: 'http://localhost:4200',
  credentials: true
}));

app.use(session({
  secret: 'supersecretkey',
  resave: false,
  saveUninitialized: false,
  cookie: {
    maxAge: 10 * 60 * 1000,    // session expires after 10 mins
    httpOnly: true,           // can't access via JS
    secure: false,            // set to true in production with HTTPS
    sameSite: 'lax'
  }
}));

// CSRF protection (optional, advanced)
const csrfProtection = csurf();
app.use(csrfProtection);

// Dummy user data
const users = [
  { id: '1', username: 'user1', passwordHash: bcrypt.hashSync('password1', 10) }
];

// Login route
app.post('/login', (req, res) => {
  const { username, password } = req.body;
  const user = users.find(u => u.username === username);
  if (user && bcrypt.compareSync(password, user.passwordHash)) {
    req.session.user = { id: user.id, username: user.username, mfaPassed: false };
    res.json({ message: 'Login step 1 success, please complete MFA' });
  } else {
    res.status(401).json({ message: 'Invalid credentials' });
  }
});

// MFA step (mock)
app.post('/mfa', (req, res) => {
  const { code } = req.body;
  if (req.session.user && code === '123456') { // hardcoded, replace with real TOTP/OTP
    req.session.user.mfaPassed = true;
    res.json({ message: 'MFA success, fully logged in' });
  } else {
    res.status(401).json({ message: 'Invalid MFA code' });
  }
});

// Keep-alive
app.get('/keep-alive', (req, res) => {
  if (req.session.user && req.session.user.mfaPassed) {
    req.session.touch();
    res.json({ message: 'Session extended' });
  } else {
    res.status(401).json({ message: 'Not logged in' });
  }
});

// Protected route
app.get('/profile', (req, res) => {
  if (req.session.user && req.session.user.mfaPassed) {
    res.json({ user: req.session.user });
  } else {
    res.status(401).json({ message: 'Unauthorized' });
  }
});

// Logout
app.post('/logout', (req, res) => {
  req.session.destroy();
  res.json({ message: 'Logged out' });
});

// CSRF token route
app.get('/csrf-token', (req, res) => {
  res.json({ csrfToken: req.csrfToken() });
});

app.listen(3000, () => console.log('Server running on http://localhost:3000'));

Security explained:
✅ bcrypt – passwords never stored in plain text
✅ MFA adds extra step
✅ CSRF tokens protect state-changing requests
✅ httpOnly + secure session cookies protect against XSS
✅ Rolling session expiry with req.session.touch()


Frontend (Angular 18+)
Keep the keep-alive.service.ts but add MFA step and CSRF integration.

keep-alive.service.ts
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { interval, Subscription } from 'rxjs';

@Injectable({ providedIn: 'root' })
export class KeepAliveService {
  private intervalMs = 5 * 60 * 1000;
  private sub?: Subscription;

  constructor(private http: HttpClient) {}

  start() {
    if (!this.sub) {
      this.sub = interval(this.intervalMs).subscribe(() => {
        this.http.get('http://localhost:3000/keep-alive', { withCredentials: true })
          .subscribe({
            next: () => console.log('Session kept alive'),
            error: err => console.error('Keep-alive failed', err)
          });
      });
    }
  }

  stop() {
    this.sub?.unsubscribe();
    this.sub = undefined;
  }
}

login.component.ts

import { Component } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { KeepAliveService } from './keep-alive.service';

@Component({
  selector: 'app-login',
  template: `
    <form (ngSubmit)="login()">
      <input [(ngModel)]="username" name="username" placeholder="Username">
      <input [(ngModel)]="password" name="password" type="password" placeholder="Password">
      <button>Login</button>
    </form>

    <form *ngIf="showMfa" (ngSubmit)="submitMfa()">
      <input [(ngModel)]="mfaCode" name="mfaCode" placeholder="MFA Code">
      <button>Submit MFA</button>
    </form>
  `
})
export class LoginComponent {
  username = ''; password = '';
  mfaCode = ''; showMfa = false;

  constructor(private http: HttpClient, private keepAlive: KeepAliveService) {}

  login() {
    this.http.post('http://localhost:3000/login', 
      { username: this.username, password: this.password }, 
      { withCredentials: true }
    ).subscribe(() => {
      this.showMfa = true; // prompt for MFA
    });
  }

  submitMfa() {
    this.http.post('http://localhost:3000/mfa', 
      { code: this.mfaCode }, 
      { withCredentials: true }
    ).subscribe(() => {
      console.log('Fully logged in');
      this.keepAlive.start();
    });
  }
}


csrf.service.ts (optional)

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Injectable({ providedIn: 'root' })
export class CsrfService {
  csrfToken?: string;

  constructor(private http: HttpClient) {}

  fetchToken() {
    this.http.get<{ csrfToken: string }>('http://localhost:3000/csrf-token', 
      { withCredentials: true }
    ).subscribe(res => this.csrfToken = res.csrfToken);
  }
}

Adding MFA (real)
libraries like speakeasy or services like Authy/Google Authenticator.
Replace hardcoded code check with TOTP verification:

const speakeasy = require('speakeasy');
speakeasy.totp.verify({ secret: user.secret, encoding: 'base32', token: code });

**Slide 1: Architecture Overview**

**Title:** *Architecture at a glance*

* Angular 18+ SPA frontend
* Node.js + Express backend
* `express-session` for session storage
* Periodic keep-alive requests from frontend
* MFA for secure authentication
* CSRF protection

**Slide 2: Authentication Flow**

**Title:** *Multi-step authentication*

1️⃣ User submits username/password
2️⃣ Backend verifies, starts session, prompts for MFA
3️⃣ User submits MFA code
4️⃣ Backend marks user as fully authenticated (`mfaPassed = true`)
5️⃣ Session cookie issued & rolling keep-alive starts

**Slide 3: Session Keep-Alive**
**Title:** *How session keep-alive works*

* Frontend Angular service sends request every N minutes (`/keep-alive`)
* Backend refreshes expiry: `req.session.touch()`
* Rolling session expiry: stay logged in while active
* Session auto-expires after inactivity

*Visual flow:*
User active → Angular keep-alive → Session expiry extended
User inactive → no keep-alive → session expires

**Slide 4: Security Layers**

* bcrypt for hashing passwords
* MFA (TOTP, SMS, or app-based)
* HttpOnly + Secure + SameSite cookies
* CSRF tokens for POST/PUT/DELETE
* Session storage in Redis / DB (optional for scale)
* Short expiry + keep-alive

**Slide 5: Developer Deep Dive – Backend**
* `express-session` config: secret, resave, saveUninitialized, cookie settings
* `/login` route → creates session object
* `/mfa` route → validates code, sets `mfaPassed`
* `/keep-alive` route → extends session if logged in
* CSRF token endpoint

*Node modules used:* express, express-session, bcrypt, csurf, cors

**Slide 6: Developer Deep Dive – Frontend**
* Angular service: `keep-alive.service.ts` using `interval` + HttpClient
* Login component:
  * POST `/login`
  * Then POST `/mfa`
* `withCredentials: true` → sends cookies across CORS
* Fetch CSRF token & attach in headers (for POST/PUT)

**Slide 7: Deployment / Best Practices**
* HTTPS + `secure: true` cookie
* Session store: Redis / Mongo for scaling
* CSRF middleware
* Enforce password policy
* Dockerize backend & frontend
* Monitor suspicious activity

**Slide 8: Benefits Recap**

* Seamless UX: sessions kept alive if user is active
* Strong authentication with MFA
* Short session lifespan reduces risk
* Scalable Node.js backend
* Modern Angular 18+ frontend

**Slide 9: Next Steps**
* Add real MFA (e.g., Google Authenticator)
* Store sessions in Redis
* CI/CD & container deployment
* Load testing & optimization

**Slide 10: Q\&A / Contact**

* Contact info / team
* Any questions?

---

**MFA in real life: Time-based One-Time Passwords (TOTP)**

> Typical real-world MFA: user scans a QR code into Google Authenticator, Authy, Microsoft Authenticator, etc.
> The authenticator generates a new **6-digit code every 30 seconds**.
> server & user device share a **secret** (never changes) so codes can be verified.

* `speakeasy` → Node.js library to generate/verify TOTP
* `qrcode` → generate QR code for user to scan

**1️⃣ Setup: Install dependencies**

```bash
npm install speakeasy qrcode

**2️⃣ Generate user’s MFA secret + QR code**

When user enables MFA (e.g., in profile/settings page):

```javascript
const speakeasy = require('speakeasy');
const qrcode = require('qrcode');

// Generate secret
const secret = speakeasy.generateSecret({ name: 'MyApp (username)' });

// Store secret.base32 in DB for this user
// e.g., user.mfaSecret = secret.base32;

// Generate QR code for user to scan
qrcode.toDataURL(secret.otpauth_url, (err, data_url) => {
  if (err) return console.error(err);
  // Send this data_url to frontend to display as <img src="...">
});

The secret must be stored securely in your DB** (never send to frontend).
Only send the QR image (data URL) or `otpauth://...` string.

**3️⃣ Verify the code user types in**

When the user enters the 6-digit code from Google Authenticator:

```javascript

const user = /* load from DB */;
const verified = speakeasy.totp.verify({
  secret: user.mfaSecret,
  encoding: 'base32',
  token: '123456', // code entered by user
  window: 1 // allow ±30s window for clock drift
});

if (verified) {
  // MFA passed: mark user as logged in
} else {
  // invalid code
}
```

## **Integrate into your login flow**
### First login step:
* User submits username & password
* Backend validates password → responds: "Now enter MFA code"

###  Second login step:

* User submits code → backend verifies with `speakeasy`
* If valid → backend sets `req.session.user.mfaPassed = true`

## 5️⃣ Frontend: real-time UX**

* After login (step 1): show a form: "Enter your 6-digit code"
* Angular calls `/api/verify-mfa` → backend verifies code
* If ok → redirect to dashboard & start keep-alive service

---

##**Example API routes**

**/api/setup-mfa** – for first-time setup

* Generates secret
* Stores secret in DB
* Sends QR code to frontend

**/api/verify-mfa** – after user enters code

* Checks TOTP code against secret in DB
* If correct, sets session as authenticated

---
## **6️⃣ Real-time security considerations**

✅ Only store secret on server (DB)
✅ Mark in DB that user enabled MFA
✅ Use HTTPS
✅ Use rolling session expiry
✅ Protect `/api/setup-mfa` so only logged-in users can call
✅ Optionally add backup codes / SMS as fallback
---
## **7️⃣ What user sees**
* Click: *Enable MFA*
* Backend sends QR code → displayed as `<img>`
* User scans with Google Authenticator
* App asks for first code → user types → backend verifies
* Done! MFA enabled
---
## ✅ **8️⃣ Flow in production: summary**

1️⃣ User logs in → backend checks password
2️⃣ If user has MFA enabled → ask for code
3️⃣ User types code → backend verifies
4️⃣ If correct → session marked as authenticated
5️⃣ Angular keep-alive service starts → keeps session alive
---
## **9️⃣ Advanced**
* Use hardware keys (WebAuthn)
* Add backup codes
* Use services like Authy or Okta
------
## 🧩 **1️⃣ Architecture overview**

✅ User table in DB:

```js
{
  id,
  username,
  passwordHash,
  mfaSecret,     // for TOTP
  mfaEnabled,    // boolean
  authProvider,  // e.g., 'local', 'auth0'
  ...
}
```

✅ Supports two strategies:

* Local: username+password+MFA (TOTP)
* OIDC: redirect to Auth0/Okta/etc.

---

## 🛠 **2️⃣ Project structure**

```
backend/
  ├── server.js
  ├── db.js
  ├── routes/
  │   ├── auth.js
  │   ├── mfa.js
  ├── models/
  │   └── User.js
  └── package.json
```
---
## **3️⃣ Setup**
Install:
```bash
npm install express express-session bcrypt mongoose cors csurf speakeasy qrcode passport passport-auth0 dotenv
```
---

## **4️⃣ Complete Node.js code**
---

## ✅ db.js

```javascript
const mongoose = require('mongoose');
mongoose.connect('mongodb://localhost:27017/myapp', {
  useNewUrlParser: true, useUnifiedTopology: true
});
module.exports = mongoose;
```
---
## ✅ models/User.js

```javascript
const mongoose = require('../db');
const UserSchema = new mongoose.Schema({
  username: String,
  passwordHash: String,
  mfaSecret: String,
  mfaEnabled: { type: Boolean, default: false },
  authProvider: { type: String, default: 'local' }
});
module.exports = mongoose.model('User', UserSchema);
```
---
## ✅ routes/auth.js
Handles:
* Local login
* Auth0 login (OIDC)
* Session check / logout
```javascript
const express = require('express');
const bcrypt = require('bcrypt');
const User = require('../models/User');
const router = express.Router();

// Local login step 1
router.post('/login', async (req, res) => {
  const { username, password } = req.body;
  const user = await User.findOne({ username });
  if (!user) return res.status(401).json({ message: 'User not found' });
  const ok = await bcrypt.compare(password, user.passwordHash);
  if (!ok) return res.status(401).json({ message: 'Invalid password' });

  req.session.userId = user.id;
  req.session.mfaPassed = !user.mfaEnabled;
  res.json({ needMfa: user.mfaEnabled });
});

// Logout
router.post('/logout', (req, res) => {
  req.session.destroy();
  res.json({ message: 'Logged out' });
});

// Check session
router.get('/me', async (req, res) => {
  if (!req.session.userId || !req.session.mfaPassed)
    return res.status(401).json({ message: 'Not authenticated' });
  const user = await User.findById(req.session.userId);
  res.json({ username: user.username });
});

module.exports = router;
```
---
## routes/mfa.js
Handles:
* Enable MFA (generate secret + QR)
* Verify MFA code
```javascript
const express = require('express');
const speakeasy = require('speakeasy');
const qrcode = require('qrcode');
const User = require('../models/User');

const router = express.Router();

// Enable MFA (generate secret & QR)
router.post('/setup', async (req, res) => {
  if (!req.session.userId) return res.sendStatus(401);
  const secret = speakeasy.generateSecret({ name: 'MyApp' });
  await User.findByIdAndUpdate(req.session.userId, {
    mfaSecret: secret.base32,
    mfaEnabled: false
  });
  const qr = await qrcode.toDataURL(secret.otpauth_url);
  res.json({ qr });
});

// Verify MFA & activate
router.post('/verify', async (req, res) => {
  if (!req.session.userId) return res.sendStatus(401);
  const { code } = req.body;
  const user = await User.findById(req.session.userId);
  const ok = speakeasy.totp.verify({
    secret: user.mfaSecret,
    encoding: 'base32',
    token: code
  });
  if (ok) {
    user.mfaEnabled = true;
    await user.save();
    req.session.mfaPassed = true;
    res.json({ message: 'MFA verified & enabled' });
  } else {
    res.status(400).json({ message: 'Invalid code' });
  }
});

module.exports = router;
```
---

## server.js
add session & Auth0
```javascript
require('dotenv').config();
const express = require('express');
const session = require('express-session');
const cors = require('cors');
const passport = require('passport');
const Auth0Strategy = require('passport-auth0');

const authRoutes = require('./routes/auth');
const mfaRoutes = require('./routes/mfa');

const app = express();

app.use(cors({ origin: 'http://localhost:4200', credentials: true }));
app.use(express.json());
app.use(session({
  secret: 'supersecret',
  resave: false,
  saveUninitialized: false,
  cookie: { httpOnly: true, secure: false, maxAge: 10 * 60 * 1000 }
}));

// Passport Auth0
passport.use(new Auth0Strategy({
  domain: process.env.AUTH0_DOMAIN,
  clientID: process.env.AUTH0_CLIENT_ID,
  clientSecret: process.env.AUTH0_CLIENT_SECRET,
  callbackURL: '/api/auth/callback'
}, (accessToken, refreshToken, extraParams, profile, done) => {
  return done(null, profile);
}));
passport.serializeUser((user, done) => done(null, user));
passport.deserializeUser((obj, done) => done(null, obj));

app.use(passport.initialize());
app.use(passport.session());

// Routes
app.use('/api/auth', authRoutes);
app.use('/api/mfa', mfaRoutes);

// Auth0 login
app.get('/api/auth/auth0',
  passport.authenticate('auth0', { scope: 'openid email profile' })
);
app.get('/api/auth/callback',
  passport.authenticate('auth0', { failureRedirect: '/' }),
  (req, res) => res.redirect('http://localhost:4200/dashboard')
);

app.listen(3000, () => console.log('Server running on http://localhost:3000'));
```
---
## **5️⃣ How this supports OIDC/Auth0/Okta**

* `passport-auth0` (same for Okta → use `passport-openidconnect`)
* Backend redirects to Auth0, Okta, or your OIDC provider
* After user authenticates, user profile comes back
* You can merge that into your DB & create session
---
## 🧪 **6️⃣ How frontend uses this**

✅ Local:
* `/api/auth/login` → get `needMfa`
* `/api/mfa/verify` → send code
* `/api/auth/me` → get session
✅ Auth0:
* Redirect user to `/api/auth/auth0`
* Auth0 handles login → callback → redirect back
---
## **7️⃣ Security checklist**
✅ bcrypt for password
✅ httpOnly + secure session cookie
✅ CSRF (add later)
✅ Store secrets safely
✅ Rotate secrets
✅ Enforce strong password & TOTP
---

* MongoDB script to create users
Of course! Here’s a **simple, production‑like MongoDB script** to create users, including:
✅ username, hashed password (with bcrypt)
✅ option to pre‑set MFA secret or leave empty
✅ can be run directly in Node.js / `mongo` shell

---
## 🛠 **Option A: Node.js script (recommended)**

### 1️⃣ Install dependencies:
```bash
npm install mongoose bcrypt
```

---
### 🧩 2️⃣ Create file: `createUsers.js`

```javascript
const mongoose = require('mongoose');
const bcrypt = require('bcrypt');

async function main() {
  await mongoose.connect('mongodb://localhost:27017/myapp', {
    useNewUrlParser: true, useUnifiedTopology: true
  });

  const User = mongoose.model('User', new mongoose.Schema({
    username: String,
    passwordHash: String,
    mfaSecret: String,
    mfaEnabled: { type: Boolean, default: false },
    authProvider: { type: String, default: 'local' }
  }));

  // Clear existing users (optional!)
  await User.deleteMany({});

  // Create users
  const users = [
    {
      username: 'alice',
      password: 'password123',
      mfaEnabled: false,
      authProvider: 'local'
    },
    {
      username: 'bob',
      password: 'bobsecure',
      mfaEnabled: false,
      authProvider: 'local'
    }
  ];

  for (const u of users) {
    const passwordHash = await bcrypt.hash(u.password, 10);
    await User.create({
      username: u.username,
      passwordHash,
      mfaSecret: '', // leave empty initially; set when user enables MFA
      mfaEnabled: u.mfaEnabled,
      authProvider: u.authProvider
    });
    console.log(`Created user: ${u.username}`);
  }

  await mongoose.disconnect();
  console.log('Done!');
}

main().catch(err => console.error(err));
```

---

### ✅ 3️⃣ Run:

```bash
node createUsers.js
```

You’ll see:

```
Created user: alice
Created user: bob
Done!
```

---

## **Result in DB:**

```js
{
  _id: ObjectId(...),
  username: "alice",
  passwordHash: "...hashed...",
  mfaSecret: "",
  mfaEnabled: false,
  authProvider: "local",
  __v: 0
}
```

---

##  **Option B: Mongo Shell / mongosh**

If you *just* want quick insert (without bcrypt):
```javascript
use myapp;

db.users.insertMany([
  {
    username: "alice",
    passwordHash: "PLAINTEXT123",  // ⚠ DO NOT do this in production!
    mfaSecret: "",
    mfaEnabled: false,
    authProvider: "local"
  }
]);
```

> Better to use Node.js script so passwords are hashed.

---

## 🧩 **Next step (real MFA):**

When user enables MFA in your app:

* backend generates secret (`speakeasy.generateSecret`)
* stores `secret.base32` in `mfaSecret`
* sets `mfaEnabled: true` after verification

---

## 📦 **✅ WANT:**

* This script
* Plus Node.js backend code
* Plus Angular components & services
Excellent! Let’s do this properly:
✅ Angular 18+ **service** for MFA communication with the backend
✅ Angular **components**:

* Setup MFA (display QR code to scan)
* Verify MFA (enter 6-digit code)
  ✅ Uses HttpClient + withCredentials (since we use session cookies)
  ✅ Clean, real-world structure

I’ll deep dive + give you *complete code* that drops into your Angular app.
*(If you say “yes zip” I’ll bundle it all as a ready-to-run sample.)*

---

## 📦 **Project structure**

```
src/app/
  services/
    mfa.service.ts
  components/
    mfa-setup/
      mfa-setup.component.ts/html
    mfa-verify/
      mfa-verify.component.ts/html
```

---

## 🧩 **1️⃣ MFA service**

Handles calling backend: setup & verify.

### `src/app/services/mfa.service.ts`

```typescript
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({ providedIn: 'root' })
export class MfaService {
  private api = 'http://localhost:3000/api/mfa';

  constructor(private http: HttpClient) {}

  // Request server to generate secret + QR
  setupMfa(): Observable<{ qr: string }> {
    return this.http.post<{ qr: string }>(`${this.api}/setup`, {}, { withCredentials: true });
  }

  // Send code to verify and enable MFA
  verifyMfa(code: string): Observable<{ message: string }> {
    return this.http.post<{ message: string }>(
      `${this.api}/verify`,
      { code },
      { withCredentials: true }
    );
  }
}
```

---

## 🖼 **2️⃣ Component: Setup MFA**

Displays QR code returned by backend.

### `src/app/components/mfa-setup/mfa-setup.component.ts`

```typescript
import { Component } from '@angular/core';
import { MfaService } from '../../services/mfa.service';

@Component({
  selector: 'app-mfa-setup',
  templateUrl: './mfa-setup.component.html'
})
export class MfaSetupComponent {
  qrCode?: string;

  constructor(private mfaService: MfaService) {}

  setup() {
    this.mfaService.setupMfa().subscribe({
      next: res => this.qrCode = res.qr,
      error: err => console.error('Failed to setup MFA', err)
    });
  }
}
```

---

### `src/app/components/mfa-setup/mfa-setup.component.html`

```html
<button (click)="setup()">Setup MFA</button>

<div *ngIf="qrCode">
  <p>Scan this QR code with Google Authenticator or Authy:</p>
  <img [src]="qrCode" alt="MFA QR code">
</div>
```

---

## 🔢 **3️⃣ Component: Verify MFA**

User enters the 6-digit code to complete enabling MFA.

### `src/app/components/mfa-verify/mfa-verify.component.ts`

```typescript
import { Component } from '@angular/core';
import { MfaService } from '../../services/mfa.service';

@Component({
  selector: 'app-mfa-verify',
  templateUrl: './mfa-verify.component.html'
})
export class MfaVerifyComponent {
  code = '';
  message?: string;

  constructor(private mfaService: MfaService) {}

  verify() {
    this.mfaService.verifyMfa(this.code).subscribe({
      next: res => this.message = res.message,
      error: err => this.message = 'Invalid code'
    });
  }
}
```
---
### `src/app/components/mfa-verify/mfa-verify.component.html`

```html
<input [(ngModel)]="code" placeholder="Enter 6-digit code">
<button (click)="verify()">Verify</button>

<p *ngIf="message">{{ message }}</p>
```

---

## 📦 **4️⃣ How to use in your app**

* After user logs in → navigate to `/mfa-setup` to set up MFA if not enabled
* Or show `/mfa-verify` to complete login if MFA is enabled
* After successful verification → redirect to dashboard, start keep-alive

---

## 🛡 **5️⃣ Security notes**

* Always send requests with `{ withCredentials: true }` to send session cookies
* Backend must protect `/api/mfa/setup` & `/api/mfa/verify` to logged-in users only
* Display user-friendly error messages

---

## ✅ **6️⃣ Want the full ready-to-run Angular app?**

I can generate:

* Working Angular app with:

  * Login form
  * MFA setup & verify
  * Keep-alive service
* Node.js backend
* MongoDB script
* README + Docker

I’ve prepared a full-featured **Angular + Node.js MFA project**, including:

* **Backend** (Node.js + Express + MongoDB + `speakeasy` + session-based auth)
* **Frontend** (Angular 18+ with:

  * `MfaService`
  * `MfaSetupComponent`
  * `MfaVerifyComponent`
  * Keep‑alive service
  * Login & routing)
* **Helper scripts**:

  * `createUsers.js` → creates users in MongoDB with bcrypt-hashed passwords
  * Angular routing & guard for protecting routes
* **README + Dockerfile + `.env.example`**

---

## 📦 What You’ll Get in the Zip

1. **Backend**:

   * `/routes/auth.js`: login/logout/me endpoints
   * `/routes/mfa.js`: setup & verify MFA with QR code
   * `db.js`, `models/User.js`, `createUsers.js`, and `server.js`
   * MongoDB setup, session config, and real-time MFA flow

2. **Frontend**:

   * `MfaService` (API calls with `withCredentials`)
   * `MfaSetupComponent` (shows QR to scan)
   * `MfaVerifyComponent` (enter & verify code)
   * `KeepAliveService`, Login flow, and guards

3. **Utility scripts**:

   * `createUsers.js`: to initialize users
   * `.env.example`: config values (DB URI, session secret)

4. **Docker support**:

   * `Dockerfile` for backend + `docker-compose.yml` to run MongoDB + backend

---

### 🔗 Reference: Speakeasy for MFA

We use `speakeasy.generateSecret()` to create TOTP secrets compatible with Google/Authy, and `speakeasy.totp.verify()` to validate codes ([rahulomnitrics.medium.com][1], [blog.logrocket.com][2], [github.com][3], [github.com][4]).

---
[1]: https://rahulomnitrics.medium.com/integrate-google-authenticator-app-with-nodejs-two-factor-authentication-77426e2353dc?utm_source=chatgpt.com "Integrate Google Authenticator App with Nodejs | Two-Factor ..."
[2]: https://blog.logrocket.com/implementing-two-factor-authentication-using-speakeasy/?utm_source=chatgpt.com "Implementing two-factor authentication using Speakeasy"
[3]: https://github.com/speakeasyjs/speakeasy?utm_source=chatgpt.com "speakeasyjs/speakeasy: **NOT MAINTAINED** Two-factor ... - GitHub"
[4]: https://github.com/twuni/mfa?utm_source=chatgpt.com "twuni/mfa: Multi Factor Authentication (MFA) for Node.js ... - GitHub"


github
https://medium.com/%40narendrakamath/create-an-angular-7-google-authenticator-node-js-web-app-with-two-factor-authentication-95e87af9356b