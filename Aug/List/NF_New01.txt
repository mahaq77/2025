Angular 20 Shell & Micro Frontends with Native Federation & NGRXThis guide outlines the architecture and steps to implement an Angular 20 application using a Shell-Micro Frontend pattern, powered by Native Federation, and leveraging NGRX for state management and inter-component communication.1. Architecture OverviewShell (Host Application)The main application that loads and orchestrates the micro frontends. It provides common layouts, navigation, and potentially shared services or a shared NGRX store.Micro Frontends (Remote Applications)Independent Angular applications that are developed, built, and deployed autonomously. They are exposed to the shell via Native Federation. Each MFE can have its own NGRX store or interact with a shared store provided by the shell.Native FederationA modern module federation solution that allows multiple separate builds to form a single application. It leverages standard ES modules, making it highly performant and compatible with modern build tools.NGRX (State Management)A reactive state management library for Angular, inspired by Redux. It provides a structured way to manage application state, handle side effects, and enable predictable data flow. It's crucial for complex communication patterns, especially across micro frontends.2. Project Setup (Conceptual Steps)You would typically set this up using the Angular CLI.Install Angular CLI:npm install -g @angular/cli
Create a New Angular Workspace:ng new my-mf-workspace --create-application=false
cd my-mf-workspace
(We create a workspace without an initial application to add the shell and MFEs as separate projects.)Add the Shell (Host) Application:ng generate application shell --routing=true --style=scss
Add Micro Frontend (Remote) Applications:Repeat this for each micro frontend you need.ng generate application mfe-dashboard --routing=true --style=scss
ng generate application mfe-products --routing=true --style=scss
Integrate Native Federation:For each project (shell and all MFEs), you'll need to add Native Federation.ng add @angular-architects/native-federation --project shell
ng add @angular-architects/native-federation --project mfe-dashboard
ng add @angular-architects/native-federation --project mfe-products
This command will modify your angular.json and create webpack.config.js files for each project.Install NGRX:For each project that will use NGRX (likely the shell and potentially some MFEs), install NGRX.ng add @ngrx/store --project shell
ng add @ngrx/effects --project shell
ng add @ngrx/store-devtools --project shell
Repeat for mfe-dashboard, mfe-products if they need their own stores.3. Native Federation ConfigurationThe ng add @angular-architects/native-federation command will generate webpack.config.js files. You'll need to configure these for sharing and consuming modules.projects/shell/webpack.config.js (Host)const { with	Federated	Type	Script } = require('@angular-architects/native-federation/webpack');

module.exports = withFederatedTypeScript({
  federationConfig: {
    // This is the host application
    name: 'shell',
    remotes: {
      // Define the micro frontends it will load
      // The value is the URL where the remote's `remoteEntry.json` will be served
      // In a real scenario, these would be deployed URLs. For local dev, use port.
      'mfeDashboard': 'http://localhost:4201/remoteEntry.json', // Assuming mfe-dashboard runs on 4201
      'mfeProducts': 'http://localhost:4202/remoteEntry.json',  // Assuming mfe-products runs on 4202
    },
    shared: {
      // Define shared libraries to avoid duplication
      // These should be versions compatible across all federated apps
      "@angular/core": { singleton: true, strictVersion: true, requiredVersion: 'auto' },
      "@angular/common": { singleton: true, strictVersion: true, requiredVersion: 'auto' },
      "@angular/router": { singleton: true, strictVersion: true, requiredVersion: 'auto' },
      "@ngrx/store": { singleton: true, strictVersion: true, requiredVersion: 'auto' }, // Share NGRX store
      // ... other Angular modules and common libraries
    }
  },
  // Add other webpack configurations as needed
});
projects/mfe-dashboard/webpack.config.js (Remote)const { withFederatedTypeScript } = require('@angular-architects/native-federation/webpack');

module.exports = withFederatedTypeScript({
  federationConfig: {
    // This is a remote application
    name: 'mfeDashboard',
    exposes: {
      // Define components/modules that this MFE exposes to the shell
      './Component': './projects/mfe-dashboard/src/app/dashboard/dashboard.component.ts',
      './Module': './projects/mfe-dashboard/src/app/dashboard/dashboard.module.ts',
      // You can expose entire routes or specific components
    },
    shared: {
      // Define shared libraries, must match shell's shared config
      "@angular/core": { singleton: true, strictVersion: true, requiredVersion: 'auto' },
      "@angular/common": { singleton: true, strictVersion: true, requiredVersion: 'auto' },
      "@angular/router": { singleton: true, strictVersion: true, requiredVersion: 'auto' },
      "@ngrx/store": { singleton: true, strictVersion: true, requiredVersion: 'auto' },
      // ... other Angular modules and common libraries
    }
  },
  // Add other webpack configurations as needed
});
Repeat for mfe-products.4. Loading Micro Frontends in the ShellIn the shell application, you'll use loadRemoteModule to dynamically load the exposed modules/components.projects/shell/src/app/app-routing.module.tsimport { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { loadRemoteModule } from '@angular-architects/native-federation';

const routes: Routes = [
  {
    path: '',
    redirectTo: 'dashboard',
    pathMatch: 'full'
  },
  {
    path: 'dashboard',
    loadChildren: () =>
      loadRemoteModule('mfeDashboard', './Module').then(m => m.DashboardModule)
  },
  {
    path: 'products',
    loadChildren: () =>
      loadRemoteModule('mfeProducts', './Module').then(m => m.ProductsModule)
  },
  // Add more routes for other MFEs
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }
5. NGRX Store ManagementShared NGRX Store (Shell-Owned)For a truly unified state across MFEs, the Shell can own the primary NGRX store. MFEs would then dispatch actions and select data from this shared store.projects/shell/src/app/store/app.state.ts// Define the root state interface
export interface AppState {
  // Define state slices for the shell and potentially shared data
  sharedData: { value: string };
  // ... other shell-specific states
}
projects/shell/src/app/store/shared-data.reducer.tsimport { createReducer, on } from '@ngrx/store';
import { updateSharedData } from './shared-data.actions';

export interface SharedDataState {
  value: string;
}

export const initialSharedDataState: SharedDataState = {
  value: 'Initial Shared Data'
};

export const sharedDataReducer = createReducer(
  initialSharedDataState,
  on(updateSharedData, (state, { newValue }) => ({ ...state, value: newValue }))
);
projects/shell/src/app/store/shared-data.actions.tsimport { createAction, props } from '@ngrx/store';

export const updateSharedData = createAction(
  '[Shared Data] Update Shared Data',
  props<{ newValue: string }>()
);
projects/shell/src/app/store/shared-data.selectors.tsimport { createFeatureSelector, createSelector } from '@ngrx/store';
import { AppState } from './app.state';
import { SharedDataState } from './shared-data.reducer';

export const selectSharedDataState = createFeatureSelector<AppState, SharedDataState>('sharedData');

export const selectSharedDataValue = createSelector(
  selectSharedDataState,
  (state: SharedDataState) => state.value
);
projects/shell/src/app/app.module.tsimport { NgModule, isDevMode } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { StoreModule } from '@ngrx/store';
import { EffectsModule } from '@ngrx/effects';
import { StoreDevtoolsModule } from '@ngrx/store-devtools';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { sharedDataReducer } from './store/shared-data.reducer';

@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    StoreModule.forRoot({
      sharedData: sharedDataReducer
      // Add other root reducers here
    }),
    EffectsModule.forRoot([]), // Add root effects here
    StoreDevtoolsModule.instrument({ maxAge: 25, logOnly: !isDevMode() })
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
Consuming Shared Store in Micro FrontendsSince @ngrx/store is shared via Native Federation, MFEs can directly inject Store and interact with the shell's store.projects/mfe-dashboard/src/app/dashboard/dashboard.component.tsimport { Component, OnInit } from '@angular/core';
import { Store } from '@ngrx/store';
import { Observable } from 'rxjs';
import { selectSharedDataValue, updateSharedData } from '../../../../shell/src/app/store/shared-data.actions'; // Adjust path based on your setup

// IMPORTANT: The path to shared-data.actions/selectors from the MFE
// might need to be resolved correctly by Native Federation.
// In a real scenario, you might expose these actions/selectors from the shell's
// webpack.config.js or have a dedicated shared library for common NGRX elements.
// For simplicity here, we're showing a direct path, but in a federated setup,
// you'd typically import from the exposed module name.

// Example of how to import if exposed by shell:
// import { updateSharedData, selectSharedDataValue } from 'shell/SharedStore';

@Component({
  selector: 'app-dashboard',
  template: `
    <div class="p-4 bg-blue-100 rounded-lg shadow-md">
      <h2 class="text-xl font-bold mb-2">Dashboard MFE</h2>
      <p class="mb-4">Value from Shell's Shared Store: <span class="font-semibold">{{ sharedData$ | async }}</span></p>
      <input type="text" [(ngModel)]="inputValue" class="border rounded px-3 py-2 mr-2">
      <button (click)="updateValue()" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">Update Shared Data</button>
    </div>
  `
})
export class DashboardComponent implements OnInit {
  sharedData$: Observable<string>;
  inputValue: string = '';

  constructor(private store: Store) {
    this.sharedData$ = this.store.select(selectSharedDataValue);
  }

  ngOnInit(): void {
    this.sharedData$.subscribe(value => {
      this.inputValue = value;
    });
  }

  updateValue(): void {
    this.store.dispatch(updateSharedData({ newValue: this.inputValue }));
  }
}
6. Component Communication (Shell <-> MFE)Beyond a shared NGRX store, you might need direct component communication.a) Input/Output Decorators (for direct parent-child relationships)If you load a specific MFE component directly into a shell component (not via routing), you can use @Input() and @Output().projects/mfe-dashboard/src/app/dashboard/dashboard.component.ts (MFE Component)import { Component, Input, Output, EventEmitter } from '@angular/core';

@Component({
  selector: 'app-dashboard',
  template: `
    <div class="p-4 bg-green-100 rounded-lg shadow-md">
      <h2 class="text-xl font-bold mb-2">Dashboard MFE</h2>
      <p>Data from Shell (Input): {{ shellMessage }}</p>
      <button (click)="sendMessageToShell()" class="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600">Send Message to Shell</button>
    </div>
  `
})
export class DashboardComponent {
  @Input() shellMessage: string = '';
  @Output() mfeEvent = new EventEmitter<string>();

  sendMessageToShell(): void {
    this.mfeEvent.emit('Hello from Dashboard MFE!');
  }
}
projects/shell/src/app/app.component.ts (Shell Component)import { Component } from '@angular/core';
import { loadRemoteModule } from '@angular-architects/native-federation';

@Component({
  selector: 'app-root',
  template: `
    <div class="p-6">
      <h1 class="text-3xl font-bold mb-6">Angular Shell Application</h1>
      <nav class="mb-6">
        <a routerLink="/dashboard" class="mr-4 text-blue-600 hover:underline">Dashboard MFE</a>
        <a routerLink="/products" class="text-blue-600 hover:underline">Products MFE</a>
      </nav>

      <router-outlet></router-outlet>

      <div class="mt-8 p-4 bg-yellow-100 rounded-lg shadow-md">
        <h2 class="text-xl font-bold mb-2">Direct Component Loading Example</h2>
        <p>Shell Message for MFE: {{ shellDirectMessage }}</p>
        <button (click)="loadDashboardComponent()" class="bg-yellow-500 text-white px-4 py-2 rounded hover:bg-yellow-600 mb-4">Load Dashboard Component Directly</button>
        <ng-container *ngIf="DashboardComponent">
          <app-dashboard
            [shellMessage]="shellDirectMessage"
            (mfeEvent)="handleMfeEvent($event)"
          ></app-dashboard>
        </ng-container>
        <p *ngIf="receivedMfeMessage" class="mt-4">Received from MFE: {{ receivedMfeMessage }}</p>
      </div>
    </div>
  `
})
export class AppComponent {
  title = 'shell';
  shellDirectMessage: string = 'Data from Shell for direct MFE component!';
  receivedMfeMessage: string = '';
  DashboardComponent: any; // To hold the dynamically loaded component

  constructor() {}

  async loadDashboardComponent() {
    // This assumes './Component' exposes the DashboardComponent directly
    const m = await loadRemoteModule('mfeDashboard', './Component');
    this.DashboardComponent = m.DashboardComponent;
  }

  handleMfeEvent(message: string): void {
    this.receivedMfeMessage = message;
    console.log('Event from MFE:', message);
  }
}
b) NGRX for Cross-MFE/Shell CommunicationAs demonstrated in the NGRX section, using a shared NGRX store is the most robust way for decoupled communication between the shell and various micro frontends. MFEs dispatch actions, and other MFEs or the shell can react to these actions via selectors or effects.c) Shared Service/Event Bus (Less Preferred, but possible)You could create a shared service that acts as an event bus using RxJS Subject or BehaviorSubject. This service would need to be provided at a common root level (e.g., in the shell's AppModule) and then shared via Native Federation.projects/shell/src/app/shared/event-bus.service.tsimport { Injectable } from '@angular/core';
import { Subject, Observable } from 'rxjs';

@Injectable({
  providedIn: 'root' // Provided in root, so it's a singleton across the app
})
export class EventBusService {
  private eventSubject = new Subject<any>();

  emit(event: any): void {
    this.eventSubject.next(event);
  }

  on(): Observable<any> {
    return this.eventSubject.asObservable();
  }
}
projects/mfe-dashboard/src/app/dashboard/dashboard.component.ts (Using Event Bus)import { Component, OnInit } from '@angular/core';
import { EventBusService } from '../../../../shell/src/app/shared/event-bus.service'; // Adjust path

@Component({
  selector: 'app-dashboard',
  template: `
    <div class="p-4 bg-purple-100 rounded-lg shadow-md">
      <h2 class="text-xl font-bold mb-2">Dashboard MFE (Event Bus)</h2>
      <button (click)="sendEvent()" class="bg-purple-500 text-white px-4 py-2 rounded hover:bg-purple-600">Send Event via Bus</button>
    </div>
  `
})
export class DashboardComponent implements OnInit {
  constructor(private eventBus: EventBusService) {}

  ngOnInit(): void {
    this.eventBus.on().subscribe(event => {
      if (event.type === 'SHELL_MESSAGE') {
        console.log('MFE received message from shell via event bus:', event.payload);
      }
    });
  }

  sendEvent(): void {
    this.eventBus.emit({ type: 'MFE_MESSAGE', payload: 'Message from Dashboard MFE via Event Bus!' });
  }
}
projects/shell/src/app/app.component.ts (Using Event Bus)import { Component, OnInit } from '@angular/core';
import { EventBusService } from './shared/event-bus.service';

@Component({
  selector: 'app-root',
  // ... template as above, potentially adding a button to send events
})
export class AppComponent implements OnInit {
  // ... existing properties

  constructor(private eventBus: EventBusService) {}

  ngOnInit(): void {
    this.eventBus.on().subscribe(event => {
      if (event.type === 'MFE_MESSAGE') {
        console.log('Shell received message from MFE via event bus:', event.payload);
      }
    });
  }

  sendShellEvent(): void {
    this.eventBus.emit({ type: 'SHELL_MESSAGE', payload: 'Message from Shell via Event Bus!' });
  }
}
Note: For the event bus, ensure EventBusService is exposed and shared correctly via Native Federation if MFEs are to consume it directly. Providing it in root and sharing @angular/core should handle this for basic cases.7. Running the ApplicationsTo run this setup locally, you would typically start each application on a different port:# In separate terminal windows:
ng serve shell --port 4200
ng serve mfe-dashboard --port 4201
ng serve mfe-products --port 4202
Then, navigate to http://localhost:4200 to see the shell application loading the micro frontends.This guide provides a foundational understanding and conceptual code for building your Angular 20 Shell and Micro Frontends application. You will need to implement the actual business logic and UI within each MFE and the shell.