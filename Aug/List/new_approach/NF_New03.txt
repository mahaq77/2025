 This is modern, production-ready, future-proof Angular 20.
ðŸ›  Full step-by-step real code
âœ… Step 1: Install Angular Material

ng add @angular/material
Pick any prebuilt theme (we'll override).
Add animations when prompted.

 Folder & file structure
src/
 â”œâ”€ app/
 â”‚   â”œâ”€ app.component.ts
 â”‚   â”œâ”€ app.routes.ts
 â”‚   â”œâ”€ app.config.ts
 â”‚   â””â”€ stores/
 â”‚       â”œâ”€ user.store.ts
 â”‚       â””â”€ theme.store.ts
 â”œâ”€ styles/
 â”‚   â”œâ”€ _dark-theme.scss
 â”‚   â”œâ”€ _light-theme.scss
 â”‚   â””â”€ _default-theme.scss
 â””â”€ main.ts

 src/styles/_dark-theme.scss
@use '@angular/material' as mat;
@include mat.core();

$dark-primary: mat.define-palette(mat.$blue-grey-palette);
$dark-accent: mat.define-palette(mat.$pink-palette);
$dark-theme: mat.define-dark-theme((
  color: (
    primary: $dark-primary,
    accent: $dark-accent,
  ),
));

.dark-theme {
  @include mat.all-component-themes($dark-theme);
}

 Repeat similarly for _light-theme.scss and _default-theme.scss, using different palettes.
@import 'styles/dark-theme';
@import 'styles/light-theme';
@import 'styles/default-theme';

/* Default applied theme */
body { @extend .default-theme; }

 src/app/app.component.ts
import { Component, OnInit } from '@angular/core';
import { RouterOutlet, RouterLink } from '@angular/router';
import { ThemeStore } from './stores/theme.store';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { MatSelectModule } from '@angular/material/select';
import { NgIf } from '@angular/common';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [
    RouterOutlet, RouterLink, NgIf,
    MatToolbarModule, MatSidenavModule, MatButtonModule, MatIconModule, MatSelectModule
  ],
  template: `
  <mat-toolbar color="primary">
    <span>ðŸŒ± Angular 20 Themed App</span>
    <span class="spacer"></span>
    <mat-select placeholder="Theme" [value]="themeStore.theme()" (selectionChange)="changeTheme($event.value)">
      <mat-option value="default">Default</mat-option>
      <mat-option value="light">Light</mat-option>
      <mat-option value="dark">Dark</mat-option>
    </mat-select>
  </mat-toolbar>

  <mat-sidenav-container style="height:calc(100vh - 64px)">
    <mat-sidenav mode="side" opened>
      <p><a routerLink="/">Home</a></p>
      <p><a routerLink="/posts">Posts</a></p>
    </mat-sidenav>
    <mat-sidenav-content>
      <div style="padding:16px">
        <h2>Demo Buttons & Inputs</h2>
        <button mat-raised-button color="primary">Primary Button</button>
        <button mat-stroked-button color="accent">Accent Button</button>
        <mat-form-field>
          <input matInput placeholder="Input field">
        </mat-form-field>
        <mat-form-field>
          <mat-select placeholder="Select option">
            <mat-option value="one">One</mat-option>
            <mat-option value="two">Two</mat-option>
          </mat-select>
        </mat-form-field>
      </div>
      <router-outlet></router-outlet>
    </mat-sidenav-content>
  </mat-sidenav-container>
  `,
  styles: [`
    .spacer { flex: 1 1 auto; }
  `]
})
export class AppComponent implements OnInit {
  constructor(public themeStore: ThemeStore) {}
  ngOnInit() { this.themeStore.loadFromLocalStorage(); }
  changeTheme(theme: string) { this.themeStore.setTheme(theme as any); }
}

src/app/stores/theme.store.ts
import { Injectable, signal } from '@angular/core';

export type ThemeType = 'dark' | 'light' | 'default';

@Injectable({ providedIn: 'root' })
export class ThemeStore {
  private _theme = signal<ThemeType>('default');
  readonly theme = this._theme.asReadonly();

  setTheme(theme: ThemeType) {
    this._theme.set(theme);
    // Animate: fade out old, fade in new (simplest: CSS)
    document.body.classList.remove('theme-transition');
    void document.body.offsetWidth; // trigger reflow
    document.body.classList.add('theme-transition');

    document.body.className = '';  // clear old classes
    document.body.classList.add(`${theme}-theme`);
    localStorage.setItem('theme', theme);
  }

  loadFromLocalStorage() {
    const saved = localStorage.getItem('theme') as ThemeType;
    if (saved) this.setTheme(saved);
  }
}


 src/styles.scss (add CSS animation)
@import 'styles/dark-theme';
@import 'styles/light-theme';
@import 'styles/default-theme';

body { @extend .default-theme; }

.theme-transition {
  transition: background-color 0.3s ease, color 0.3s ease;
}

 src/app/app.config.ts
import { ApplicationConfig } from '@angular/core';
import { provideRouter } from '@angular/router';
import { provideHttpClient } from '@angular/common/http';
import { routes } from './app.routes';
// + Angular Material animations
import { provideAnimations } from '@angular/platform-browser/animations';

export const appConfig: ApplicationConfig = {
  providers: [
    provideRouter(routes),
    provideHttpClient(),
    provideAnimations(),
    // add more future providers here
  ]
};

ðŸ“¦ src/app/app.routes.ts (example routes)
import { Routes } from '@angular/router';
import { HomeComponent } from './home/home.component';
import { PostListComponent } from './post-list/post-list.component';

export const routes: Routes = [
  { path: '', component: HomeComponent },
  { path: 'posts', component: PostListComponent }
];


Add minimal components  Make them standalone:

------------------------------------------------------------------------------
src/app/home/home.component.ts
import { Component } from '@angular/core';

@Component({
  standalone: true,
  selector: 'app-home',
  template: `<h2>Home</h2>`
})
export class HomeComponent {}

-----------------------------------------------------------------------
src/app/post-list/post-list.component.ts
import { Component } from '@angular/core';

@Component({
  standalone: true,
  selector: 'app-post-list',
  template: `<h2>Post List</h2>`
})
export class PostListComponent {}
-----------------------------------------------------------------------
src/main.ts
import { bootstrapApplication } from '@angular/platform-browser';
import { AppComponent } from './app/app.component';
import { appConfig } from './app/app.config';

bootstrapApplication(AppComponent, appConfig)
  .catch(err => console.error(err));


Angular Material real components: toolbar, sidenav, buttons, inputs, select

Dark / light / default themes (switchable with CSS animation)

Modern Angular 20 standalone structure

Ready to add MFEs, signal stores, APIs

Hereâ€™s a complete set of presentational slides â€” divided for:

âœ… Business team â†’ high-level, value, why we do this
âœ… Tech team â†’ architecture, file structure, modern Angular 20 approach, theming, Signal Store, Material, Native Federation-ready




Presentation slides: Modern Angular 20 App with Native Federation, Material & Theming

Slide 1 â€“ Title
âš¡ Modern Angular 20 Microfrontend App  
with Standalone APIs, Signal Store & Dynamic Theming


Slide 2 â€“ What we built (for business)
Modular, scalable Angular 20 app
Modern standalone structure â†’ no AppModule
Angular Material: consistent UI / UX, ready for branding
Dynamic theming: light, dark, default (switch at runtime)
Reactive state: Signal Store (new Angular reactive pattern)
API-ready via HttpClient
Microfrontend-ready with Native Federation

Slide 3 â€“ Benefits (business team)
| Old Angular App           | New Angular 20 App                         |
| ------------------------- | ------------------------------------------ |
| Monolith                  | Modular, microfrontend-ready               |
| Shared codebase only      | Independent MFEs, teams, deployments       |
| Complex NgModules         | Standalone components & modules            |
| NgRx boilerplate          | Lightweight Signal Store                   |
| No theme or only CSS swap | Real Angular Material theming + animations |
| Hard to upgrade           | Incremental, per-MFE updates               |


Slide 4 â€“ High-level architecture
Shell App (Angular 20 standalone)
 â”œâ”€ Theming (Signal Store)
 â”œâ”€ Global APIs
 â”œâ”€ Navigation, toolbar, sidenav
 â”œâ”€ Load MFEs at runtime:
     â”œâ”€ Products
     â”œâ”€ Orders
     â”œâ”€ Profile
     â”œâ”€ Reports
     â””â”€ Admin

Each MFE: separate Angular 20 app, standalone, exposed via remoteEntry.json

Slide 5 â€“ Why Angular 20 standalone?
Smaller bundles, faster build (esbuild)
Tree-shakable: unused code removed
Clear separation â†’ easier maintainability
Providers via app.config.ts
No AppModule complexity

Slide 6 â€“ Dynamic theming
Three themes: light, dark, default
Angular Material SCSS palettes
User can switch via dropdown in toolbar
Smooth CSS transition animations
Theme persisted in localStorage

Slide 7 â€“ State management
Signal Store â†’ new Angular reactive pattern
Simpler than NgRx
Small footprint, built-in reactivity
Example: ThemeStore, UserStore, ProductStore
Can combine with backend data or RxJS streams

Slide 8 â€“ Angular Material integration
Toolbar: title, theme selector
Sidenav: nav links
Buttons: primary / accent demo
Inputs & selects
Easy to scale for enterprise design system


Slide 9 â€“ Modern file structure
src/app/
 â”œâ”€ app.component.ts         <-- standalone root
 â”œâ”€ app.routes.ts           <-- routes
 â”œâ”€ app.config.ts           <-- global providers
 â””â”€ stores/
      â”œâ”€ theme.store.ts
      â””â”€ user.store.ts
src/styles/
 â”œâ”€ _dark-theme.scss
 â”œâ”€ _light-theme.scss
 â””â”€ _default-theme.scss
src/main.ts


 Slide 10 â€“ app.config.ts: core providers
provideRouter(routes)
provideHttpClient()
provideAnimations()
Future: provideServiceWorker(), provideStore(), provideEffects()

ðŸš€ Slide 11 â€“ Ready for Native Federation
MFEs: Products, Orders, Profile, Reports, Admin
Each in separate Git repo & deployment
Shell loads MFEs dynamically
Use Native Federation in angular.json â†’ no webpack config
Separate CI/CD, team ownership

âœ… Slide 12 â€“ Summary
Fully modern Angular 20 app
Modular, scalable, maintainable
Beautiful, brandable UI with Angular Material
Dynamic dark/light/default themes
Signal Store for reactivity & UI state
Microfrontend ready â†’ scale to enterprise

âœ¨ Slide 13 â€“ Next steps
Package core design system
Build CI/CD per MFE
Add analytics & A/B testing
Optimize for SSR or pre-render
Expand Signal Store to shared domain state

