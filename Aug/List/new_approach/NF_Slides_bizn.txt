Part 2: Presentational slides (business-level)


 Slide 1: Title Enterprise Angular 20 Microfrontend Architecture
with Native Federation & Signal Store


 Slide 2: What we built
Shell + 5 Microfrontends (Products, Orders, Profile, Reports, Admin)

Each in separate Git repo & deployment

Native federation (no webpack config)

ESBuild (fast build, modern)

Angular 20 standalone modules & components

Modern reactive state: Signal Store + localStorage


Slide 3: Why this approach?
| Old way                  | New way                                |
| ------------------------ | -------------------------------------- |
| Single large Angular app | Fully modular MFEs                     |
| Shared monorepo          | Separate repos, separate teams         |
| Webpack config, complex  | Native federation, zero webpack config |
| NgRx boilerplate         | Lightweight Signal Store               |


 Slide 4: Architecture diagram
    Shell app (Angular 20)
       |
       |-- Products MFE (Angular 20)
       |-- Orders MFE
       |-- Profile MFE
       |-- Reports MFE
       |-- Admin MFE
Each MFE hosted behind own URL (https://products.mycompany.com/...)

Shell dynamically loads via remoteEntry.json

Slide 5: File structure (per app)
src/app/
 ├─ app.component.ts
 ├─ app.routes.ts
 └─ stores/          <-- signal store


Slide 6: Modern state (Signal Store)
Reactive, lightweight, built into Angular 17+

State per MFE: products, orders, etc.

Persisted to localStorage

Shared state in shell: user profile


Slide 7: Benefits
✅ Independent deployments
✅ Faster builds (esbuild)
✅ Smaller bundles (tree-shakable standalone)
✅ Modern reactive UX
✅ Clear team boundaries (products team ≠ admin team)


 Slide 8: Next steps
Add shared design system

Add CI/CD pipelines per MFE

Add SSR if needed

Implement shared auth / feature flags

Benefits:
No AppModule

Tree-shakable

Clear config split

Best practice for Angular 20+