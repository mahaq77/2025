New (standalone) ‚Äî deep dive

main.ts ‚Üí use bootstrapApplication

Convert AppComponent, HomeComponent, PostListComponent to standalone

Define routes in app.routes.ts


// src/main.ts
import { bootstrapApplication } from '@angular/platform-browser';
import { provideRouter } from '@angular/router';
import { AppComponent } from './app/app.component';
import { routes } from './app/app.routes';

bootstrapApplication(AppComponent, {
  providers: [
    provideRouter(routes)
  ]
})
  .catch(err => console.error(err));



// src/app/app.routes.ts
import { Routes } from '@angular/router';
import { HomeComponent } from './home/home.component';
import { PostListComponent } from './post-list/post-list.component';

export const routes: Routes = [
  { path: '', component: HomeComponent },
  { path: 'posts', component: PostListComponent }
];


// src/app/app.component.ts		//Convert to standalone and import RouterOutlet for routing.
import { Component } from '@angular/core';
import { RouterLink, RouterOutlet } from '@angular/router';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [
    RouterOutlet,
    RouterLink
  ],
  template: `
    <h1>üìö Blog App</h1>
    <nav>
      <a routerLink="/">Home</a> |
      <a routerLink="/posts">Posts</a>
    </nav>
    <router-outlet></router-outlet>
  `
})
export class AppComponent {}



// src/app/home/home.component.ts		//Make it standalone.
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-home',
  standalone: true,
  imports: [CommonModule],
  template: `<h2>üè° Welcome to the Home Page!</h2>`
})
export class HomeComponent {}



5) post-list.component.ts
// src/app/post-list/post-list.component.ts
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-post-list',
  standalone: true,
  imports: [CommonModule],
  template: `
    <h2>üìù Posts</h2>
    <ul>
      <li *ngFor="let post of posts">{{ post }}</li>
    </ul>
  `
})
export class PostListComponent {
  posts = ['Post 1', 'Post 2', 'Post 3'];
}


src/
 ‚îú‚îÄ app/
 ‚îÇ   ‚îú‚îÄ app.component.ts
 ‚îÇ   ‚îú‚îÄ app.routes.ts
 ‚îÇ   ‚îú‚îÄ home/
 ‚îÇ   ‚îÇ   ‚îî‚îÄ home.component.ts
 ‚îÇ   ‚îî‚îÄ post-list/
 ‚îÇ       ‚îî‚îÄ post-list.component.ts
 ‚îî‚îÄ main.ts




// src/app/app.config.ts
import { ApplicationConfig } from '@angular/core';
import { provideRouter } from '@angular/router';
import { routes } from './app.routes';
import { importProvidersFrom } from '@angular/core';
import { MaterialModule } from './material.module';

export const appConfig: ApplicationConfig = {
  providers: [
    provideRouter(routes),
    importProvidersFrom(MaterialModule)
  ]
};



// src/app/app.component.ts
import { Component } from '@angular/core';
import { RouterLink, RouterOutlet } from '@angular/router';
import { MatChipsModule } from '@angular/material/chips';
import { MatButtonModule } from '@angular/material/button';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [
    RouterOutlet,
    RouterLink,
    MatChipsModule,
    MatButtonModule
    // add others as needed
  ],
  template: `
    <button mat-button>Click me</button>
    <mat-chip-list>
      <mat-chip>Example Chip</mat-chip>
    </mat-chip-list>
    <router-outlet></router-outlet>
  `
})
export class AppComponent {}


Option 2: Keep your MaterialModule as a module, then use in standalone
Angular standalone supports importing NgModules too.
// src/app/material.module.ts
import { NgModule } from '@angular/core';
import { MatChipsModule } from '@angular/material/chips';
import { MatButtonModule } from '@angular/material/button';

@NgModule({
  exports: [
    MatChipsModule,
    MatButtonModule,
    // etc.
  ]
})
export class MaterialModule {}

Then in your standalone component:
// src/app/app.component.ts
import { Component } from '@angular/core';
import { RouterLink, RouterOutlet } from '@angular/router';
import { MaterialModule } from './material.module';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [
    RouterOutlet,
    RouterLink,
    MaterialModule // ‚úÖ directly import NgModule into standalone component
  ],
  template: `
    <button mat-button>Click me</button>
    <mat-chip-list>
      <mat-chip>Example Chip</mat-chip>
    </mat-chip-list>
    <router-outlet></router-outlet>
  `
})
export class AppComponent {}



Option 3: For truly global imports (less common):
Create a helper in your app.config.ts and import the Material modules in the root bootstrapApplication:
// src/app/app.config.ts
import { ApplicationConfig } from '@angular/core';
import { provideRouter } from '@angular/router';
import { routes } from './app.routes';
import { importProvidersFrom } from '@angular/core';
import { MaterialModule } from './material.module';

export const appConfig: ApplicationConfig = {
  providers: [
    provideRouter(routes),
    importProvidersFrom(MaterialModule)
  ]
};

Then bootstrap with config:
// src/main.ts
import { bootstrapApplication } from '@angular/platform-browser';
import { AppComponent } from './app/app.component';
import { appConfig } from './app/app.config';

bootstrapApplication(AppComponent, appConfig)
  .catch(err => console.error(err));
 Note: importProvidersFrom(MaterialModule) only makes providers available; to use Material directives/components, you still need to import Material modules in standalone components.